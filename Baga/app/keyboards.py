import logging

from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

logger = logging.getLogger(__name__)


# –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –≤ –≤–∏–¥–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
return_to_start = InlineKeyboardButton(text='‚§¥Ô∏è –í –Ω–∞—á–∞–ª–æ', callback_data='return_to_start')

async def return_to_start_markup(process_interrupt=True) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    caption = '‚§¥Ô∏è –ü—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å' if process_interrupt else '‚§¥Ô∏è –í –Ω–∞—á–∞–ª–æ'
    keyboard.button(text=caption, callback_data='return_to_start')
    return keyboard.as_markup()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∫–µ–π –∑–∞–ø–∏—Å–∏
show_trainings_kb = InlineKeyboardButton(text='üìÖ –í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üñç', callback_data='show_trainings')
tutorial_kb = InlineKeyboardButton(text='üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞üìò', callback_data='tutorial')

''' –ö–ù–û–ü–ö–ò –î–õ–Ø –ê–î–ú–ò–ù–ê '''
add_event_admin_kb = InlineKeyboardButton(text='üí† –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üóì', callback_data='add_event')
add_gym_kb_admin_kb = InlineKeyboardButton(text='üí† –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ª ‚ûï', callback_data='add_gym')
look_gym_kb_admin_kb = InlineKeyboardButton(text='üí† –¢–µ–∫—É—â–∏–µ –∑–∞–ª—ã üìç', callback_data='show_gyms')
admin_tutorial_kb = InlineKeyboardButton(text='üí† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ üìô', callback_data='admin_tutorial')
admin_list_admin_kb = InlineKeyboardButton(text='üí† –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ üíµ', callback_data='admin_list')

async def edit_admins() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='edit_admin:add')
    keyboard.button(text='–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='edit_admin:delete')
    keyboard.add(return_to_start)
    keyboard.adjust(1)
    return keyboard.as_markup()

# –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞ –Ω–µ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º –º–µ–Ω—é
async def admin_kb_markup(is_any_process=True) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    if not is_any_process:
        keyboard.button(text='üí† –£–¥–∞–ª–∏—Ç—å –∑–∞–ª ‚ùå', callback_data='delete_gym')
    caption = '‚§¥Ô∏è –ü—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å' if is_any_process else '‚§¥Ô∏è –í –Ω–∞—á–∞–ª–æ'
    keyboard.button(text=caption, callback_data='return_to_start')
    return keyboard.as_markup()

async def start_menu(admin_perm=False) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.add(show_trainings_kb)
    keyboard.add(tutorial_kb)
    if admin_perm:
        keyboard.add(add_event_admin_kb)
        keyboard.add(add_gym_kb_admin_kb)
        keyboard.add(look_gym_kb_admin_kb)
        keyboard.add(admin_tutorial_kb)
        keyboard.add(admin_list_admin_kb)
    keyboard.adjust(1)
    return keyboard.as_markup()

async def keyboard_builder(prefix: str, lst: list,
                           return_to_start_for_interrupt=True
                           ) -> InlineKeyboardMarkup:

    try:
        keyboard = InlineKeyboardBuilder()
        for i, item in enumerate(lst):
            text, index = item, i  # –ï—Å–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –∫–æ—Ä—Ç–µ–∂
            if isinstance(item, tuple):
                text = f"{item[1]} {item[0]}"
            if isinstance(item, dict):
                index = item['id']
                text = item['info']
            keyboard.button(text=text, callback_data=f"{prefix}:{index}")
        if return_to_start_for_interrupt:
            keyboard.add(InlineKeyboardButton(text='‚§¥Ô∏è –ü—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', callback_data="return_to_start"))
        else:
            keyboard.add(return_to_start)
        keyboard.adjust(1)
        return keyboard.as_markup()
    except Exception as e:
        logger.error(f"err = {e}")


# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
def show_events_kb(event_user: list, *args) -> InlineKeyboardMarkup:
    try:
        keyboard = InlineKeyboardBuilder()
        events_id_list = [item['event__id'] for item in event_user]
        for arg in args:
            tag = 'üü¢' if arg['id'] in events_id_list else ''
            gym, date = arg['gym__info'], arg['date'].strftime("%d.%m.%Y")
            begin, end = arg['begin'].strftime('%H:%M'), arg['end'].strftime('%H:%M')
            text = f"{tag} {arg['training_type']}; {date}, {begin} - {end}. {gym}"
            keyboard.button(text=text, callback_data=f"choose_event:{arg['id']}")
        keyboard.add(return_to_start)
        keyboard.adjust(1)
        return keyboard.as_markup()
    except Exception as e:
        logger.error(f'err = {e}')


# –§—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async def show_text_about_event(event: dict, event_user: list) -> str:
    date = event['date'].strftime("%d.%m.%Y")
    begin, end = event['begin'].strftime('%H:%M'), event['end'].strftime('%H:%M')
    participants_count = int(event['participants_count'])

    #–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    text = (f"<b>{str(event['training_type']).upper()}</b>\n"
             f"<b>{event['gym__info']}: </b>\n"
             f"<b><i>–î–∞—Ç–∞</i></b>: {date}.\n"
             f"<b><i>–ù–∞—á–∞–ª–æ</i></b>: {begin}.\n"
             f"<b><i>–ö–æ–Ω–µ—Ü</i></b>: {end}.\n"
             f"–ö–≤–æ—Ç–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: <b><i>{participants_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</i></b>\n\n"
             f"<b>–û–°–ù–û–í–ù–û–ô –°–ü–ò–°–û–ö</b>\n")

    for i, item in enumerate(event_user):
        if i + 1 <= participants_count:
            if item['payment_confirmed'] is False:
                tag = '‚ùå'
            elif not item['payment_confirmed'] and item['paid_check']:
                tag = '‚úîÔ∏è'
            elif item['payment_confirmed']:
                tag = '‚úÖ'
            else:
                tag = '‚ö†Ô∏è'
        else:
            tag = ''
        text+=f"{i+1}. {item['user__tg_name']} @{item['user__tg_username']}  {tag}\n"
        if i + 1 == participants_count:
            text += "\n üìåüìå <b><i>–†–µ–∑–µ—Ä–≤</i></b>: \n"

    text += ('\n<b>‚ùóÔ∏è–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>\n'
            'üîπ\n'
            '–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ–± —ç—Ç–æ–º –±–æ—Ç. '
            '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ <i>"‚úîÔ∏è –Ø –æ–ø–ª–∞—Ç–∏–ª"</i>.\n'
            'üîπ\n'
            '–ö–Ω–æ–ø–∫–∞ <i>"‚úîÔ∏è –Ø –æ–ø–ª–∞—Ç–∏–ª"</i> –¥–æ—Å—Ç—É–ø–Ω–∞ <u>–¢–û–õ–¨–ö–û</u> —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ‚ö†Ô∏è;\n'
            'üîπ\n'
            '–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ ‚ö†Ô∏è –∏ ‚ùå –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ <i>–î–ï–î–õ–ê–ô–ù–ê</i> –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –±–æ—Ç–æ–º '
            '–≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏.\n\n'
            '–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–∏—Ç–∞–π—Ç–µ –≤ <b>/train</b> –∏ <b>/marks</b>.\n\n')

    return text


# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async def sign_up_for_training(
        signed_up_for_training: bool,
        availible_pay: bool,
        admin_permissions=False
) -> InlineKeyboardMarkup:
    try:
        keyboard = InlineKeyboardBuilder()
        if signed_up_for_training is False:
            keyboard.add(InlineKeyboardButton(
                text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
                callback_data='sign_up_for_training'
            ))
        else:
            keyboard.add(InlineKeyboardButton(
                text='–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
                callback_data='delete_from_training'
            ))

        # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ 2 —É—Å–ª–æ–≤–∏–π: —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ, –ø–æ–ª–µ 'payment_confirmed' –≤ –ë–î not True
        if availible_pay:
            keyboard.button(text='‚úîÔ∏è –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data='i_payed_check')
        if admin_permissions:
            keyboard.button(text='üí† –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ', callback_data='verify_payment:confirm')
            keyboard.button(text='üí† –û–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç—å –æ–ø–ª–∞—Ç—É ‚ùå', callback_data='verify_payment:refute')
            keyboard.button(text='üí† –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ üö∑', callback_data='drop_or_chancel:participant')
            keyboard.button(text='üí† üö´ –û–¢–ú–ï–ù–ò–¢–¨ –¢–†–ï–ù–ò–†–û–í–ö–£ üí•', callback_data='drop_or_chancel:chancel_training')
        keyboard.add(return_to_start)
        keyboard.adjust(1)
        return keyboard.as_markup()
    except Exception as e:
        logging.error(e)


''' –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∏–Ω–ª–∞–π–Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. 
–°–æ—Å—Ç–∞–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ö–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
—á–µ–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª–¥–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—à–µ—Ç—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É '''
training_sign_up_kb = InlineKeyboardMarkup(inline_keyboard =[
    [InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', callback_data='sign_up_to_section')],
    [InlineKeyboardButton(text='–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ', callback_data='check_upload'),
     InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ', callback_data='check_delete')]])
