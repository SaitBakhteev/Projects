import logging

from aiogram import Router, F, BaseMiddleware
from aiogram.types import Message, CallbackQuery, TelegramObject
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from typing import Callable, Dict, Any, Awaitable

import app.database.requests as db_req  # –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î

from app.calendar import NewCalendar

from datetime import datetime, timedelta, time, date
from aiogram_calendar import SimpleCalendarCallback

import app.keyboards as kb
import app.states as st

from app.tutorial import TUTORIAL, ADMIN_TUTORIAL, SIGN_UP_FOR_TRAINING_TUTORIAL, MARKS_DESCRIPTION

from config import TRAINING_TYPES

logger = logging.getLogger(__name__)
user = Router()

# –ö—ç—à —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cache = dict()

# –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class AdminMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if isinstance(event, (Message, CallbackQuery)):
            user_tg_id = event.from_user.id

            ''' –ó–¥–µ—Å—å –Ω–µ—Å–µ–æ–ª—å–µ–æ –Ω–µ–ª–æ–≥–∏—á–Ω—ã–π –∫–æ–¥, –æ–Ω —á–∏—Å—Ç–æ –¥–ª—è –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏, –µ—Å–ª–∏ –≤–¥—Ä—É–≥
            –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
            –¢–∞–∫–∂–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø–æ –ø–æ–≤–æ–¥–∂—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Å–µ—Ä–≤–µ—Ä–∞  '''
            if user_tg_id not in user_cache:
                user = await db_req.get_or_create_user(event.from_user)
                user_cache[user_tg_id] = user
                if user:
                    data["is_admin"] = user.admin_permissions
                else:
                    data["is_admin"] = False

                # –ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
                return await handler(event, data)
            else:
                if user_cache[user_tg_id] is None:
                    user_cache[user_tg_id] = await db_req.get_or_create_user(event.from_user)

            user = user_cache[user_tg_id]

            if user:
                data["is_admin"] = True if event.from_user.username=='Rustambagautdinov'\
                    else user.admin_permissions
            else:
                data["is_admin"] = False

        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        return await handler(event, data)

user.message.middleware(AdminMiddleware())
user.callback_query.middleware(AdminMiddleware())

# ----- –û–ë–†–ê–ë–û–¢–ö–ê /start -----------
@user.message(CommandStart())
async def cmd_start(message: CallbackQuery | Message, state: FSMContext, is_admin: bool):
    try:
        await state.clear()
        is_new_user = True if user_cache[message.from_user.id] is None else False
        message = message.message if isinstance(message, CallbackQuery) else message
        if is_new_user:
            await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –≠—Ç–æ –±–æ—Ç "
                                 f"–¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n")
        admin_perm = is_admin
        await message.answer('<b>–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é:</b>',
                             reply_markup=await kb.start_menu(admin_perm),
                             parse_mode='HTML')
    except Exception as e:
        logger.error(e)
        return

@user.callback_query(F.data=='return_to_start')
async def return_to_start(call: CallbackQuery, state: FSMContext, is_admin: bool):
    await cmd_start(call, state, is_admin)



''' –ö–ù–û–ü–ö–ò –î–õ–Ø –í–´–í–û–î–ê –ò–ù–°–¢–†–£–ö–¶–ò–ô '''

# –í—ã–∑–æ–≤ TUTORIAL —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É '/help'
@user.message(Command('help'))
@user.callback_query(F.data=='tutorial')
async def tutorial(update: CallbackQuery | Message, state: FSMContext):
    await state.clear()
    message = update.message if isinstance(update, CallbackQuery) else update
    await message.answer(TUTORIAL, parse_mode='HTML', reply_markup=await kb.return_to_start_markup(False))


@user.message(Command('train'))
async def show_sign_up_for_training_tutorial(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(SIGN_UP_FOR_TRAINING_TUTORIAL, parse_mode='HTML', reply_markup=await kb.return_to_start_markup(False))


@user.message(Command('marks'))
async def marks_description(message: Message):
    await message.answer(MARKS_DESCRIPTION, parse_mode='HTML', reply_markup=await kb.return_to_start_markup(False))


@user.callback_query(F.data=='show_trainings')
async def show_trainings(call: CallbackQuery, state: FSMContext, is_admin: bool):
    await state.clear()
    await call.message.delete()
    events = await db_req.get_event()
    event_user = await db_req.get_event_user(user_tg_id=call.from_user.id)
    if not events:
        await call.message.answer('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.')
        await cmd_start(call, state, is_admin)
    else:
        await call.message.answer(
            '–ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –∑–Ω–∞–∫ üü¢, –∑–Ω–∞—á–∏—Ç –í—ã —Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:',
            reply_markup=kb.show_events_kb(
                event_user,*events
            ),
            parse_mode='HTML'
        )
        await state.update_data(events=events)


# –°–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–≥–∞—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@user.message(Command('bug'))
async def bug(message: Message, state:FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
                         reply_markup= await kb.return_to_start_markup())
    await state.set_state(st.WrightBugsFSM.wright_bug)

@user.message(st.WrightBugsFSM.wright_bug)
async def send_bugs_message(message: Message, state: FSMContext, is_admin:bool):
    try:
        text = message.text
        if '0' not in text:
            logger.critical(text, extra={'username': message.from_user.username})
            await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.')
        else:
            raise Exception
    except Exception as e:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n'
                             '–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—á–∏–Ω–∞ –≤ –æ—Ç—Å—Ç—É—Å—Ç–≤–∏–∏ –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º.')
        logger.error('Error on /bugs')
        pass
    await cmd_start(message, state, is_admin)

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
@user.callback_query(F.data=='admin_list')
async def admin_list(call: CallbackQuery, state: FSMContext):
    try:
        text = ''
        for k in user_cache:
            if user_cache[k].admin_permissions == True:
                text += f'{user_cache[k].tg_username}\n'
            if len(text) > 0:
                await call.message.answer(text, reply_markup=await kb.edit_admins())
            else:
                await call.message.answer('–ö—Ä–æ–º–µ –í–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤', reply_markup=await kb.edit_admins())
    except Exception as e:
        await call.message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')
        logger.info(f'Error_on admin_list: {e}')
        await cmd_start(call, state, True)


@user.callback_query(F.data.startswith('edit_admin:'))
async def edit_admin(call: CallbackQuery, state: FSMContext):
    try:
        call_data = call.data.split(':')[1]
        admin_permissions = True if call_data == 'add' else False
        await state.update_data(admin_permissions=admin_permissions)
        await state.set_state(st.EditAdminFSM.edit_admin)
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞, <i>–±–µ–∑"@"</i>, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º, '
                             '—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å.\n '
                             '<i>–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫–∫–∞—É–Ω—Ç <u>"@Ivanov_79"</u>, —Ç–æ '
                             '–Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ <u>"Ivanov_79"</u></i>.',
                             reply_markup=await kb.return_to_start_markup(), parse_mode='HTML')

        await state.set_state(st.EditAdminFSM.edit_admin)
    except Exception as e:
        logger.error(e)
        await call.message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.')
        await cmd_start(call, state, True)

@user.message(st.EditAdminFSM.edit_admin)
async def finish_edit_admin(message: Message, state: FSMContext):
    try:
        tg_username = message.text.replace('@', '')
        data = await state.get_data()
        admin_permissions = data['admin_permissions']
        user, tg_id = await db_req.update_admin_and_get(tg_username, admin_permissions)
        user_cache[tg_id] = user
        await message.answer('–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω.')
    except Exception as e:
        logger.error(e)
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.')
        pass
    await cmd_start(message, state, True)


# –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–∏—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@user.callback_query(F.data.startswith('choose_event'))
async def choose_event(update: CallbackQuery | Message, state: FSMContext,
                       is_admin: bool):
    try:
        data = await state.get_data()
        events = data.get('events')
        this_call_query = None # —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ä–∞–±–æ—Ç—É —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

        if isinstance(update, CallbackQuery):
            this_call_query = True if update.data.startswith('choose_event') else False

        event_id = int(update.data.split(':')[1]) if this_call_query else data.get('event_id')
        event = next(item for item in events if item['id'] == event_id) if this_call_query else data.get('event')
        event_user = await db_req.get_event_user(event_id=event_id)
        text = await kb.show_text_about_event(event, event_user)
        call_id = update.from_user.id

        await state.update_data(event_id=event_id, event=event, event_user=event_user)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        availible_pay, paid_check, payment_confirmed = False, None, None
        signed_up_for_training =True if any(item['user__tg_id'] == call_id for item in event_user)\
            else False

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —Ç–æ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        if signed_up_for_training:
            user_id, paid_check, payment_confirmed = (
                next((item['user__id'], item['paid_check'], item['payment_confirmed'])
                     for item in event_user if item['user__tg_id'] == call_id))
            await state.update_data(user_id = user_id)

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –±–æ—Ç–∞ –æ–± –æ–ø–ª–∞—Ç–µ
            participants_count = int(event['participants_count'])
            user_place_on_list = next(i+1 for i, item in enumerate(event_user)
                                      if item['user__tg_id']==call_id)
            availible_pay = True if (user_place_on_list <= participants_count
                                     and paid_check is None
                                     and payment_confirmed is None ) else False

        keyboard = await kb.sign_up_for_training(signed_up_for_training,
                                                 availible_pay,
                                                 admin_permissions=is_admin)
        if isinstance(update, CallbackQuery):
            await update.message.delete()
            await update.message.answer(text, parse_mode='HTML', reply_markup=keyboard)
        else:
            await update.answer(text, parse_mode='HTML', reply_markup=keyboard)
    except Exception as e:
        logger.error(e)


# –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
@user.callback_query(F.data=='sign_up_for_training')
async def sign_up_for_training(call: CallbackQuery, state: FSMContext, is_admin: bool):
    try:
        # await call.message.delete()
        await call.message.answer('–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n'
                                  '–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞ —ç—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É'
                                  '<i>"‚úîÔ∏è –Ø –æ–ø–ª–∞—Ç–∏–ª"</i>')
        data = await state.get_data()
        user = await db_req.get_or_create_user(call.from_user, True)
        data['user_id'] = user['id']
        await db_req.create_event_user(data)
        await choose_event(call, state, is_admin)
    except Exception as e:
        logger.error(e)


# –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –±–æ—Ç –æ–± –æ–ø–ª–∞—Ç–µ –∫–Ω–æ–ø–∫–æ–π '‚úîÔ∏è –Ø –æ–ø–ª–∞—Ç–∏–ª'
@user.callback_query(F.data=='i_payed_check')
async def i_payed_check(call: CallbackQuery, state: FSMContext, is_admin: bool):
    try:
        data = await state.get_data()
        user_id, event_id = data['user_id'], data['event_id']
        await db_req.update_event_user(user_id=user_id, event_id=event_id,
                                       paid_check=True, payment_confirmed=False)
        await choose_event(call, state, is_admin)
    except Exception as e:
        logger.error(e)


# –£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@user.callback_query(F.data=='delete_from_training')
async def delete_from_training(call: CallbackQuery, state: FSMContext, is_admin: bool):
    data = await state.get_data()
    user_id, event_id = data.get('user_id'), data.get('event_id')
    await db_req.delete_event_user(user_id, event_id)
    # await call.message.delete()
    await state.clear()
    await call.answer('–í—ã —É–¥–∞–ª–∏–ª–∏—Å—å –∏–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.')
    await cmd_start(call, state, is_admin)



''' –î–û–°–¢–£–ü–ù–´–ï –ê–î–ú–ò–ù–£ –§–£–ù–ö–¶–ò–ò  '''

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
@user.message(Command('admin'))
@user.callback_query(F.data=='admin_tutorial')
async def admin_tutorial(update: CallbackQuery | Message, state: FSMContext):
    await state.clear()
    message = update.message if isinstance(update, CallbackQuery) else update
    await message.answer(ADMIN_TUTORIAL, parse_mode='HTML',
                              reply_markup=await kb.return_to_start_markup(False))

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ª–∞ –∞–¥–º–∏–Ω–æ–º
@user.callback_query(F.data=='add_gym')
async def add_gym(call: CallbackQuery, state: FSMContext, is_admin: bool):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ª–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –µ–≥–æ –∞–¥—Ä–µ—Å–∞.\n'
        '<b>–ü—Ä–∏–º–µ—Ä</b>: <i>"–ó–∞–ª –ö–•–¢–ò, –ö.–ú–∞—Ä–∫—Å–∞ 72"</i>',
        parse_mode='HTML', reply_markup= await kb.return_to_start_markup()

    )
    await state.set_state(st.CreateGymFSM.info)

@user.message(st.CreateGymFSM.info)
async def create_gym(message: Message, state: FSMContext):
    await message.delete()
    await db_req.create_gym(message.text)
    await state.clear()
    await message.answer('–ù–æ–≤—ã–π –∑–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.')
    await show_gyms(message, state)

@user.callback_query(F.data=='show_gyms')
async def show_gyms(call: CallbackQuery | Message, state: FSMContext):
    if isinstance(call, CallbackQuery):
        await call.message.delete()
    text='<b>–°–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç–∑–∞–ª–æ–≤</b>:\n'
    gyms = await db_req.get_gyms(for_telegramm=True)
    if gyms:
        for i, gym in enumerate(gyms):
            text += f"<b><i>{i+1}</i></b>. {gym['info']}.\n"
        await state.update_data(gyms=gyms)
        if isinstance(call, CallbackQuery):
            await call.message.answer(text, parse_mode='HTML', reply_markup=await kb.admin_kb_markup(False))
        else:
            await call.answer(text, parse_mode='HTML', reply_markup=await kb.admin_kb_markup(False))
    else:
        await call.answer('–°–ø–∏—Å–æ–∫ –∑–∞–ª–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç')
        await cmd_start(call, state, True)

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ª–∞
@user.callback_query(F.data=='delete_gym')
async def delete_gym(call: CallbackQuery, state: FSMContext):
    text='–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å–ø–æ—Ä—Ç–∑–∞–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É.'
    await call.message.answer(text, reply_markup=await kb.admin_kb_markup())
    await state.set_state(st.DeleteGymFSM.delete_gym)

@user.message(st.DeleteGymFSM.delete_gym)
async def add_event_begin(message: Message, state: FSMContext):
    data = await state.get_data()
    gyms = data.get('gyms')
    try:
        number = int(message.text)
        if number < 1 or number > len(gyms):
            raise ValueError
        else:
            index = number - 1
            gym_id = gyms[index]['id']
            await db_req.delete_gym(gym_id)
            await message.answer('–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
        await state.clear()
        await show_gyms(message, state)
    except ValueError:
        await message.answer('üö´–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞, –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
        await state.clear()
        await show_gyms(message, state)
    except Exception as e:
        logger.error(e)

# -------------------------

# –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò

@user.callback_query(F.data=='add_event')
async def add_event(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.',
                              reply_markup=await kb.keyboard_builder(
                                  'training_type', TRAINING_TYPES
                              ))
    await state.set_state(st.CreateEventFSM.training_type)

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@user.callback_query(F.data.startswith('training_type'), st.CreateEventFSM.training_type)
async def choose_training_type(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    index = int(call.data.split(':')[1])
    training_type = TRAINING_TYPES[index][1]
    await state.update_data(training_type=training_type)
    gyms = await db_req.get_gyms(for_telegramm=True)
    if gyms:
        keyboard = await kb.keyboard_builder('choose_gym', gyms)
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', reply_markup=keyboard)
        await state.set_state(st.CreateEventFSM.gym)
    else:
        await call.message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø–æ—Å–∫–æ–ª—å–∫—É '
                                  '—É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–Ω–æ–≥–æ –∑–∞–ª–∞.')
        await cmd_start(call, state, True)


# –í—ã–±–æ—Ä –∑–∞–ª–∞
@user.callback_query(F.data.startswith('choose_gym') and st.CreateEventFSM.gym)
async def choose_gym(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.update_data(gym_id=int(call.data.split(':')[1]))
    try:
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.', reply_markup= await NewCalendar().start_calendar())
        await state.set_state(st.CreateEventFSM.date)
    except Exception as e:
        logger.error(e)


# –≤—ã–±–æ—Ä –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@user.callback_query(SimpleCalendarCallback.filter(), st.CreateEventFSM.date)
async def choose_date_training(call: CallbackQuery, callback_data: SimpleCalendarCallback,
                               state: FSMContext, is_admin: bool):
    try:
        calendar = NewCalendar()
        calendar.show_alerts = True
        early_date = datetime.now() + timedelta(days=1)  # —Ä–∞–Ω–Ω—è—è –¥–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞–≤—Ç—Ä–∞)
        late_date = datetime.now() + timedelta(days=365)  # –ø–æ–∑–¥–Ω—è—è –¥–∞—Ç–∞ (—á–µ—Ä–µ–∑ –≥–æ–¥)
        calendar.set_dates_range(early_date, late_date)
        selected, _date = await calendar.process_selection(call, callback_data)
        if selected:
            selected_date = date(_date.year, _date.month, _date.day)
            await state.update_data(date=selected_date)
            await call.answer (f'–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ {selected_date.strftime("%d.%m.%Y")}')
            await call.message.delete()
            await call.message.answer(
                '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞  –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'
                '–≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ß–ß:–ú–ú / –ß–ß:–ú–ú".\n'
                '–ü—Ä–∏–º–µ—Ä: <i>10:30 / 12:30</i>.',
                parse_mode='HTML', reply_markup=await kb.return_to_start_markup()
            )
            await state.set_state(st.CreateEventFSM.time)
        if 'CANCEL' in call.data:
            await call.answer()
            await cmd_start(call, state, is_admin)
    except Exception as e:
        logger.error(e)


# —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@user.message(st.CreateEventFSM.time)
async def set_training_time(message: Message, state: FSMContext):
    await message.delete()
    try:
        times = message.text.replace(' ', '').split('/')
        begin_time, end_time = times[0], times[1]

        # –ß–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞—é—Ç—Å—è –≤ int-—Ñ–æ—Ä–º–∞—Ç –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ time
        begin_hour, begin_minute = map(int, begin_time.split(':'))
        end_hour, end_minute = map(int, end_time.split(':'))
        begin, end = time(begin_hour, begin_minute), time(end_hour, end_minute)

        if end > begin: # –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞, –∏–Ω–∞—á–µ –æ—à–∏–±–∫–∞
            await state.update_data(begin=begin, end=end)
            await message.answer(
                f'–í—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n'
                f'<b><i>–ù–∞—á–∞–ª–æ</i></b>: {begin.strftime("%H:%M")};\n'
                f'<b><i>–ö–æ–Ω–µ—Ü</i></b>: {end.strftime("%H:%M")}.\n'
                f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:',
                parse_mode='HTML', reply_markup=await kb.return_to_start_markup()
            )
            await state.set_state(st.CreateEventFSM.participants_count)
        else:
            await message.answer('üü° –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.\n'
                                 '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥',
                                 reply_markup=await kb.return_to_start_markup())
            return
    except ValueError:
        await message.answer('‚ö†Ô∏è –í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.\n'
                             '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥',
                             reply_markup=await kb.return_to_start_markup())
        return
    except Exception as e:
        await message.answer('‚ùå –ù–∞—Ä—É—à–µ–Ω —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.',
                             reply_markup=await kb.return_to_start_markup())
        return


@user.message(st.CreateEventFSM.participants_count)
async def set_participants_count_and_finish_create_event(
        message: Message, state: FSMContext, is_admin: bool
):
    try:
        if message.text[0]=='0':
            await message.answer('–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω—É–ª—è.\n'
                                 '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥',
                                 reply_markup=await kb.return_to_start_markup())
            return
        participants_count = int(message.text.replace(' ', ''))

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ state –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è gym_id
        data = await state.get_data()
        gym_id = int(data.get('gym_id'))
        gym = await db_req.get_gyms(id=gym_id)

        await state.update_data(participants_count=participants_count,
                                gym=gym)
        data = await state.get_data()
        await db_req.create_event(data)
        await message.answer(
            f"–°–æ–∑–¥–∞–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n"
            f"<i>–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è</i>: {data.get('training_type')};\n"
            f"<i>–ó–∞–ª</i>: {gym};\n"
            f"<i>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</i>: {data.get('date')}, {data.get('begin')} - {data.get('end')};\n"
            f"<i>–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</i>: {participants_count};\n",
            reply_markup=await kb.return_to_start_markup())
        await state.clear()
        await cmd_start(message, state, is_admin)
    except ValueError:
        await message.answer('‚ùó –ù–∞—Ä—É—à–µ–Ω —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞, –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.\n'
                             '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:',
                             reply_markup=await kb.return_to_start_markup())
        return
    except Exception as e:
        logger.error(e)
        await message.answer('üö´ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:',
                             reply_markup=await kb.return_to_start_markup())
        return

    await state.update_data(participants_count=int(message.text))

#----------–ö–æ–Ω–µ—Ü –ø–æ –¥–æ–±–∞–≤–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ --------------


@user.callback_query(F.data.startswith('verify_payment:'))
async def payment_verification(call: CallbackQuery, state: FSMContext):
    try:
        # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É' –∏–ª–∏ '‚ùå –û–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç—å –æ–ø–ª–∞—Ç—É'
        verify_type = call.data.split(':')[1]
        await state.update_data(verify_type=verify_type)

        if verify_type == 'confirm':
            text = ("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ <i>'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'</i>.\n"
                    "–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ ‚úîÔ∏è, ‚ö†Ô∏è –∏ ‚ùå.\n")
        else:
            text = ("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ <i>'‚ùå –û–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç—å –æ–ø–ª–∞—Ç—É'</i>.\n"
                    "–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ‚úîÔ∏è.\n"
                    "–ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é, "
                    "—Ç–æ –±–æ—Ç –æ—Ç–º–µ–Ω–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏—é.\n")

        text += ('\n –ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –Ω–∞–±–µ—Ä–∏—Ç–µ <i><u>—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</u></i> –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ '
                 '–Ω–æ–º–µ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≤—ã—à–µ–ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µüëÜüèª –≤ –≤–∏–¥–µ <u>—Å–æ–æ–±—â–µ–Ω–∏—è</u>, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É.\n'
                 '–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ 3-–≥–æ, 5-–≥–æ –∏ 8-–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫:\n'
                 '<i><b>3, 5, 8</b></i>\n\n'
                 "<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</i>: —Å—Ç–∞—Ç—É—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω—ã <u>—á–∞—Å—Ç–∏—á–Ω–æ</u> –∏–ª–∏ –≤–æ–≤—Å–µ <u>–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</u>.\n"
                 '–° –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ <b>/admin</b>')
        await call.message.answer(text, parse_mode='HTML', reply_markup=await kb.return_to_start_markup())
        await state.set_state(st.UpdateEventUserFSM.payment_confirmed)
    except Exception as e:
        logger.error(e)

@user.message(st.UpdateEventUserFSM.payment_confirmed)
async def confirm_payment(message: Message, state: FSMContext, is_admin: bool):
    try:
        data = await state.get_data()
        event, event_user, verify_type = (data.get('event'), data.get('event_user'),
                                          data.get('verify_type'))
        participants_count = event['participants_count']

        # –°–ø–∏—Å–æ–∫ –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        number_list = message.text.replace(' ', '').split(',')
        number_list = list(map(int, number_list))

        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–æ–º–µ—Ä–∞ (–≤ —Ç.—á. 0), –≤—ã—Ö–æ–¥—è—â–∏–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –û–°–ù–û–í–ù–û–ì–û –°–ü–ò–°–ö–ê
        if any(num > participants_count or num==0 for num in number_list):
            raise IndexError
        index_list =  list(map(lambda x: x-1, number_list))

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ id –æ–±—ä–µ–∫—Ç–æ–≤ EventUser –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è 'payment_confirmed'
        if verify_type == 'confirm':  # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –ø–æ–ª–µ 'payment_confirmed' –Ω–µ True
            id_list = [event_user[i]['id'] for i in index_list if event_user[i]['payment_confirmed'] is not True]
        else: # –û–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç—å –ø–ª–∞—Ç–µ–∂ –º–æ–∂–Ω–æ, –µ—Å–ª–∏ 'payment_confirmed' –ø—É—Å—Ç–æ–µ –∏ 'paid_check' –Ω–µ –ø—É—Å—Ç–æ–µ
            id_list = [event_user[i]['id'] for i in index_list if event_user[i]['payment_confirmed'] is None
                       and event_user[i]['paid_check'] is not None]

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        if len(id_list) > 0:
            if verify_type=='refute':
                await db_req.update_event_user_for_payment_verify(id_list, is_confirm=False)
            else:
                await db_req.update_event_user_for_payment_verify(id_list)
            report = ('üëÅ‚Äçüó® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ <i>—á–∞—Å—Ç–∏—á–Ω–æ</i>. '
                      '–ü—Ä–∏—á–∏–Ω—ã –æ–ø–∏—Å–∞–Ω—ã –≤ <b>/admin</b>.') if len(id_list)<len(number_list)\
                else 'üî∑ –°—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.'
        else:
            report = 'üõë –°—Ç–∞—Ç—É—Å—ã <b>–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>. –ü—Ä–∏—á–∏–Ω—ã –æ–ø–∏—Å–∞–Ω—ã –≤ <b>/admin</b>.'
        await message.answer(report, parse_mode='HTML')
        await choose_event(message, state, is_admin)

    except ValueError:
        await message.answer('–ù—É–∂–Ω–æ <i><u>—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</u></i> –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ '
                             '<b>—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</b>. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.',
                             parse_mode='HTML',
                             reply_markup=await kb.return_to_start_markup(process_interrupt=True))
        return
    except IndexError:
        await message.answer(f'–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ '
                             f'<u>–û–°–ù–û–í–ù–û–ì–û –°–ü–ò–°–ö–ê</u>.\n'
                             f'–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.',
                             parse_mode='HTML',
                             reply_markup=await kb.return_to_start_markup(process_interrupt=True))
    except Exception as e:
        logger.error(e)
# ---------- –ö–æ–Ω–µ—Ü –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã ---------------

# ---------- –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ—Ç–º–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ---------------
@user.callback_query(F.data.startswith('drop_or_chancel'))
async def drop_or_chancel(call: CallbackQuery, state: FSMContext):
    call_data = call.data.split(':')[1]
    if call_data == 'participant':
        text = ('–£–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç—É –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ '
                '—Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        await state.set_state(st.DropParticipantFromTrainFSM.drop_participant)
    else:
        text = ('–ï—Å–ª–∏ —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –≤–≤–µ–¥–∏—Ç–µ "–¥–∞" '
                '–≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç—É, –∏–Ω–∞—á–µ –æ–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        await state.set_state(st.ChancelTraininigFSM.chancel_training)
    keyboard = await kb.return_to_start_markup()
    await call.message.answer(text, reply_markup=keyboard)


@user.message(st.DropParticipantFromTrainFSM.drop_participant)
async def drop_participant_state(message: Message, state: FSMContext, is_admin: bool):
    try:
        data = await state.get_data()
        event_user, event_id = data.get('event_user'), data.get('event_id')
        index = int(message.text) # –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞

        if index > len(event_user) or index == 0:
            raise IndexError

        user_id = next(item['user__id'] for i, item in enumerate(event_user) if i==index-1)

        await db_req.delete_event_user(user_id, event_id=event_id)
        await message.answer('–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω.')

    except ValueError:
        await message.answer('–î–æ–ø—É—Å—Ç–∏–º –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞.\n'
                             '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')
        pass
    except IndexError:
        await message.answer(f'–¢–∞–∫–∏—Ö –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.\n'
                             f'–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')
        pass
    except Exception as e:
        logger.error(e)
        pass

    await state.set_state(None)
    await choose_event(message, state, is_admin)


@user.message(st.ChancelTraininigFSM.chancel_training)
async def chancel_training_state(message: Message, state: FSMContext, is_admin: bool):
    await state.set_state(None)
    if message.text.lower() == '–¥–∞':
        data = await state.get_data()
        event_id = data.get('event_id')
        await db_req.delete_event(event_id)
        await message.answer('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.')
        await cmd_start(message, state, is_admin)
    else:
        await message.answer('–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        await choose_event(message, state, is_admin)

''' ----------- –ö–û–ù–ï–¶ –ê–î–ú–ò–ù–°–ö–ò–• –§–£–ù–ö–¶–ò–ô  ------------ '''



